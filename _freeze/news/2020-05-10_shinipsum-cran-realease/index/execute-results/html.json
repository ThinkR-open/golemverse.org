{
  "hash": "66c75f1bbc7d9b0bd0ad083cae93f2ff",
  "result": {
    "markdown": "---\ntitle: \"{shinipsum} is now on CRAN\"\nauthor: colin\ndate: '2020-05-10'\nslug: 2020-05-10_shinipsum-cran-realease\n---\n\n\n\n\n![](featured.png)\n\n\nI'm very happy to announce that `{shinipsum}` is now on CRAN!\n\n`{shinipsum}` is a package that can help you build `{shiny}` prototypes faster by providing a series of functions that can generate random elements to populate your UI.\nIf you are familiar with \"lorem ipsum\", the fake text generator that is used in software design as a placeholder for text, the idea is the same: generating placeholders for Shiny outputs.\n\n`{shinipsum}` can be installed from CRAN with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"shinipsum\")\n```\n:::\n\n\nYou can install this package from GitHub with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"Thinkr-open/shinipsum\")\n```\n:::\n\n\nIn this package, a series of functions that generates random placeholders.\nFor example, `random_ggplot()` generates random `{ggplot2}` elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shinipsum)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_ggplot() +\n  labs(title = \"Random plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_ggplot() +\n  labs(title = \"Random plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nOf course, the idea is to combine this with a Shiny interface, for example `random_ggplot()` will be used with a `renderPlot()` and `plotOutput()`.\nAnd as we want to prototype but still be close to what your final application will look like, these functions take arguments that can shape the output: for example, `random_ggplot()` has a `type` parameter that can help you select a specific geom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinipsum)\nlibrary(DT)\nui <- fluidPage(\n  h2(\"A Random DT\"),\n  DTOutput(\"data_table\"),\n  h2(\"A Random Plot\"),\n  plotOutput(\"plot\"),\n  h2(\"A Random Text\"),\n  tableOutput(\"text\")\n)\n\nserver <- function(input, output, session) {\n  output$data_table <- DT::renderDT({\n    random_DT(5, 5)\n  })\n  output$plot <- renderPlot({\n    random_ggplot(type = \"point\")\n  })\n  output$text <- renderText({\n    random_text(nwords = 50)\n  })\n}\nshinyApp(ui, server)\n```\n:::\n\n\n\nOther `{shinipsum}` functions include:\n\n+ tables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_table(nrow = 3, ncol = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               mpg cyl disp  hp drat    wt  qsec vs am gear\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4\n```\n:::\n:::\n\n\n+ print outputs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_print(type = \"model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Sepal.Length ~ Sepal.Width, data = datasets::iris)\n\nCoefficients:\n(Intercept)  Sepal.Width  \n     6.5262      -0.2234  \n```\n:::\n:::\n\n\n... and text, image, ggplotly, dygraph, and DT.\n\nLearn more about `{shinipsum}`:\n\n+ [`{shinipsum}` website](https://thinkr-open.github.io/shinipsum/)\n+ [Chapter 10 Building an “ipsum-app” - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/stepprotopype.html)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}