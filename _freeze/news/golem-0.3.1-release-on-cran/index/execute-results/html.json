{
  "hash": "a28f64b27bb0bab582db5e5b80699a8d",
  "result": {
    "markdown": "---\ntitle: \"About {golem} 0.3.1\"\nauthor: colin\ndate: '2021-05-28'\nslug: golem-0.3.1-release-on-cran\n---\n\n\n![](featured.png)\n\n\n\n\n\n\nThe new version of `{golem}` (`0.3.1`) has been available on CRAN ðŸŽ‰ for about a month now.\nThis new version includes a lot of new things, but we notably focused on working on two important new features: allowing you to extend `{golem}` via templates, and supporting for the latest changes in `{shiny}`.\n\n## Extending `{golem}`\n\nOne of the challenges when it comes to building apps in a production context is that you might be repeating some patterns over and over again: adding the same CSS in every app, creating specific functions, setting a license, adding internal packages as dependencies, etc.\n\nThe key idea with `{golem}` is to lower the number of repetitive tasks you have to perform during the engineering of your app.\nWe try to achieve that by providing tools that automate these common tasks.\nBut before version `0.3`, there was no way to optimize the \"business specific\", internal tasks of adding files, functions, or templating modules.\nThis is now possible with this new release of `{golem}`, which introduces the concept of \"golem templates\": functions that can be used for project hooks, module templates, and JavaScript and CSS file creation.\n\n### Project Hooks\n\n#### About project hooks\n\nA project hook is a functions called inside `create_golem()`.\n\nIt allows you to define custom behaviors when creating `{golem}` based apps, and can be used for:\n\n+ Adding a different front-end template in `R/app_ui.R`\n+ Changing configuration options in `inst/golem-config.yml`\n+ Copying external files in `inst/app/www`\n+ Removing a file from the default template\n+ etc.\n\nThis function is called just __after__ the default project has been created, and is executed __in the directory of the created package__.\nHere is a step by step of what happens when a project is created with `{golem}`:\n\n1. The package name is generated\n1. The directory that will receive the package is created\n1. Default `{golem}` template is copied to this directory\n1. R moves to the newly created project, and runs the `project_hook` function\n1. R moves back to the previous directory\n1. If in RStudio, the project is open\n\nThe `project_hook` function takes three mandatory parameters, which are passed from `create_golem`:\n\n+ `path`: the full path of the directory\n+ `package_name`: the name of the package\n+ `...` : further arguments that can be passed from `create_golem()` when called from the command line\n\nThese parameters might not be used inside your own hook, but __they need to be set in the hook function skeleton__ for compatibility reasons.\n\nThe best way to extend `{golem}` via a project hook is by defining a `project_hook` function in an external package.\nThis will allow this function to be used inside the `{golem}` creation RStudio project creation widget:\n\n![](rstudioprojecthook.png)\n\n#### Project hook example\n\nRemoving the dev folder:\n\n```r\nno_dev <- function(path, package_name, ...){\n   fs::dir_delete(\"dev\")\n}\ncreate_golem(\"ici\", project_hook = no_dev)\n```\n\nCreate a CSS:\n\n```r\nnew_css <- function(path, package_name, ...){\n\n  css_path <- fs::path_abs(\"inst/app/www/custom.css\")\n\n  fs::file_create(css_path)\n\n  write_there <- function(...){\n    write(..., file = css_path, append = TRUE)\n  }\n\n  write_there(\"body {\")\n  write_there(\"    background-color:red;\")\n  write_there(\"}\")\n\n  cli::cat_bullet(\"CSS generated\")\n\n}\ncreate_golem(\"ici\", project_hook = new_css)\n```\n\n### Module templates\n\n#### About module templates\n\nModule templates are called inside `add_module`.\n\nIt allows you to extend `{golem}` module template functionality by creating your own content inside the module file.\n\nThe function is called after the file(s) creation.\nHere is a step by step of what happens when the `add_module` function is called:\n\n1. The module name is generated, and the `R/` directory is created if needed\n1. The fct_ and utils_ files are created if needed\n1. The path to the module is generated\n1. If the file already exists, it opens the file\n1. If the file doesn't exist, R creates the file and the `module_template` function is called\n1. File is potentially open\n\n(Note that the `template` function is not called if the file already exists).\n\n\nModule template functions will receive, by default, the following parameters from `add_modules()`.\n\n+ `name`: the name of the module\n+ `path`: the path to the file in R/\n+ `export`: a TRUE/FALSE set by the `export` param of `add_module()`\n+ `...` further arguments\n\nThese parameters might not be used inside your own function, but __they need to be set in the function skeleton__, for compatibility reasons.\n\n#### Module template examples\n\n```r\nmy_tmpl <- function(name, path, export, ...){\n  # Define a template that write to the\n  # module file\n  write(name, path)\n}\n\ngolem::add_module(name = \"custom\", module_template = my_tmpl)\n\nmy_other_tmpl <- function(name, path, export, ...){\n  # Copy and paste a file from somewhere\n  file.copy(..., path)\n}\n\ngolem::add_module(name = \"custom\", module_template = my_other_tmpl)\n```\n\n### JS & CSS templates\n\n#### About JS & CSS templates\n\nJavaScript and CSS templates work the same way as the module templates, and are used during the creation of JavaScript files, JavaScript handlers and CSS files, i.e. inside `add_js_file()`, `add_js_handler()` and `add_css_file()`.\n\nThe function is called after the file creation.\nHere is a step by step of what happens when these functions are called:\n\n1. Name is created\n1. The path is generated\n1. If the file already exists, it opens the file\n1. If the file doesn't exist, R creates it and the `template` function is called\n1. File is potentially open\n\n(Note that the `template` function is not called if the file already exists).\n\nYou can then define your own function inside your `{golem}` based application, but chances are you will be defining them into your own package.\n\nFile template functions will receive, by default, the following parameters from the `add_*()` function.\n\n+ `path`: the path to the file\n+ `...` further arguments\n\nThese parameters might not be used inside your own function, but __they need to be set in the function skeleton__, for compatibility reasons.\n\n#### JS & CSS templates examples\n\n```r\nmy_tmpl <- function(path, ...){\n   # Define a template that only write the name of the\n   # module in the file\n  write_there <- function(...){\n    write(..., file = path, append = TRUE)\n  }\n\n  write_there(\"body {\")\n  write_there(\"    background-color:red;\")\n  write_there(\"}\")\n}\ngolem::add_css_file(name = \"custom\", template = my_tmpl)\n```\n\n\n## Support for the latest `{shiny}` features\n\n### New module skeleton\n\n`{shiny}` 1.5.0, has introduced a new skeleton when it comes to modules.\n`{golem}` now supports this new skeleton:\n\n```r\n> golem::add_module(\"plop\")\nâœ“ File created at R/mod_plop.R\n```\n\n```r\n#' plop UI Function\n#'\n#' @description A shiny Module.\n#'\n#' @param id,input,output,session Internal parameters for {shiny}.\n#'\n#' @noRd\n#'\n#' @importFrom shiny NS tagList\nmod_plop_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n\n  )\n}\n\n#' plop Server Functions\n#'\n#' @noRd\nmod_plop_server <- function(id){\n  moduleServer( id, function(input, output, session){\n    ns <- session$ns\n\n  })\n}\n\n## To be copied in the UI\n# mod_plop_ui(\"plop_ui_1\")\n\n## To be copied in the server\n# mod_plop_server(\"plop_ui_1\")\n```\n\n### Disabling auto-load\n\nSince `{shiny}` 1.5.0, the R folder is automatically sourced, in alphabetical order, when the app is loaded via `runApp()`---this used to be opt-in but is now opt-out.\n\nThis can cause some troubles with `{golem}` package structure in some (rare) cases, and only when deploying to RStudio platform via `golem::add_rstudioconnect_file()` and friends---there is no issue with the package structure and the load whenever you load golem via the `golem::run_dev()` or via `myapp::run_app()`.\n\nThis behavior can be opt-out via two mechanisms: `options(shiny.autoload.r=FALSE)`, or via a file called `_disable_autoload.R` in the `R/` folder.\nReliably setting `options` in all projects can create some issues, so we have chosen to go for the `_disable_autoload.R` solution.\n\nThis file is now created whenever you called one of `golem::add_rstudioconnect_file()`, `golem::add_shinyappsio_file()` or `golem::add_shinyserver_file()`.\nYou can also force its creation via `golem::disable_autoload()`.\n\n__Important note__. This will still print a warning to your console:\n\n```\nWarning in loadSupport(appDir, renv = sharedEnv, globalrenv = NULL) :\n  Loading R/ subdirectory for Shiny application, but this directory appears to contain an R package. Sourcing files in R/ may cause unexpected behavior.\n```\n\nThis is unfortunately because, at the time of writing these lines, `{shiny}` doesn't remove this warning when the `_disable_autoload.R` file is there, so this warning will be printed to your logs.\nYou can safely ignore it for now, as long as this behavior does not change (if it ever changes) in the `{shiny}` package.\nThere is an issue open [on the {shiny} repo](https://github.com/rstudio/shiny/issues/3355) right now, so feel free to watch the progress there!\n\n## Misc\n\nHere are a selection of changes and new features in this new version:\n\n+ You no longer need to source the `dev/run_dev.R` script and can call the `golem::run_dev()` function from your console.\n\n+ `add_html_template()` creates an empty HTML template inside your app.\n\n+ `golem::add_js_binding` and `golem::add_js_output_binding` create a skeleton for JavaScript bindings.\n\n+ `use_external_file`, `use_external_css_file`, `use_external_js_file`, and `use_external_html_template` download external files from URL and add them to the `www` folder.\nThey all have a `use_internal_` counterpart that copies files from the local computer.\n\n+ The `sanity_check()` function does a series of checks inside the current project.\n\n## Soft deprecation\n\nWe're planning on deprecating the `add_ui_server_files()` function.\nFeel free to comment on [ThinkR-open/golem/issues/445](https://github.com/ThinkR-open/golem/issues/445) if you'd like it to stay there.\n\n## Updating your old projects\n\nIf you've built a project with an older version of `{golem}`, there should be no re-engineering to do, everything should still be compatible.\n\nOne change though might be in the way you deploy your app on RStudio platforms, which is related to the way `{shiny}` now handles the package structure.\nJust run `golem::disable_autoload()` to add the support.\n\nIf ever you find any other issues with the new version of `{golem}`, please feel free to open an issue on the repository.\n\n## Feedback and questions\n\nWe're always happy to get new ideas and question on `{golem}`!\n\nIf you have a feature idea, or find a bug, please [open an issue](https://github.com/ThinkR-open/golem/issues).\n\nThe best places to ask question are either [the GitHub \"Discussions\"](https://github.com/ThinkR-open/golem/discussions) panel, or [StackOverflow](), using the `golem` tag.\n\n## Thanks\n\nWe want to thank all the people who have contributed to this version, either by opening PR, feature requests, or bug report.\n\n[&#x0040;abidawson](https://github.com/abidawson), [&#x0040;abnercasallo](https://github.com/abnercasallo), [&#x0040;aftonsteps](https://github.com/aftonsteps), [&#x0040;AMillanFL](https://github.com/AMillanFL), [&#x0040;antoine-sachet](https://github.com/antoine-sachet), [&#x0040;ArthurPERE](https://github.com/ArthurPERE), [&#x0040;artpulsion](https://github.com/artpulsion), [&#x0040;cderv](https://github.com/cderv),  [&#x0040;chintanp](https://github.com/chintanp), [&#x0040;ChrisBeeley](https://github.com/ChrisBeeley),  [&#x0040;CorradoLanera](https://github.com/CorradoLanera), [&#x0040;csgillespie](https://github.com/csgillespie), [&#x0040;daattali](https://github.com/daattali), [&#x0040;DivadNojnarg](https://github.com/DivadNojnarg), [&#x0040;durandsinclair](https://github.com/durandsinclair), [&#x0040;dwhdai](https://github.com/dwhdai), [&#x0040;dylanrussellmd](https://github.com/dylanrussellmd), [&#x0040;earnaud](https://github.com/earnaud), [&#x0040;fBedecarrats](https://github.com/fBedecarrats), [&#x0040;feddelegrand7](https://github.com/feddelegrand7), [&#x0040;fizic37](https://github.com/fizic37), [&#x0040;fvitalini](https://github.com/fvitalini), [&#x0040;gacolitti](https://github.com/gacolitti), [&#x0040;genobobeno](https://github.com/genobobeno), [&#x0040;hadley](https://github.com/hadley), [&#x0040;HanjoStudy](https://github.com/HanjoStudy), [&#x0040;henrique1008](https://github.com/henrique1008), [&#x0040;jacksonschan](https://github.com/jacksonschan), [&#x0040;jacobwindsor](https://github.com/jacobwindsor), [&#x0040;jaybee84](https://github.com/jaybee84), [&#x0040;jcrodriguez1989](https://github.com/jcrodriguez1989), [&#x0040;jennahamlin](https://github.com/jennahamlin), [&#x0040;julianstanley](https://github.com/julianstanley), [&#x0040;KasperThystrup](https://github.com/KasperThystrup), [&#x0040;Kastakin](https://github.com/Kastakin), [&#x0040;KoderKow](https://github.com/KoderKow), [&#x0040;kprimice](https://github.com/kprimice), [&#x0040;mahelious](https://github.com/mahelious), [&#x0040;MayaGans](https://github.com/MayaGans), [&#x0040;mcsiple](https://github.com/mcsiple), [&#x0040;michaelhogersnplm](https://github.com/michaelhogersnplm), [&#x0040;moodymudskipper](https://github.com/moodymudskipper), [&#x0040;mraess](https://github.com/mraess), [&#x0040;novica](https://github.com/novica), [&#x0040;nvelden](https://github.com/nvelden), [&#x0040;quickbendelat](https://github.com/quickbendelat), [&#x0040;rgaube](https://github.com/rgaube), [&#x0040;riccardoporreca](https://github.com/riccardoporreca), [&#x0040;RichardPilbery](https://github.com/RichardPilbery), [&#x0040;robertoromor](https://github.com/robertoromor), [&#x0040;seanhardison1](https://github.com/seanhardison1), [&#x0040;ShinyFabio](https://github.com/ShinyFabio), [&#x0040;sjspielman](https://github.com/sjspielman),  [&#x0040;Swechhya](https://github.com/Swechhya), [&#x0040;TimotheeTournier](https://github.com/TimotheeTournier), [&#x0040;VincentAlcazer](https://github.com/VincentAlcazer),  [&#x0040;Welsh44](https://github.com/Welsh44), [&#x0040;yogat3ch](https://github.com/yogat3ch), [&#x0040;yonicd](https://github.com/yonicd), [&#x0040;zchmielewska](https://github.com/zchmielewska), and [&#x0040;ZimmermannYves](https://github.com/ZimmermannYves).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}