<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shinipsum | Golemverse</title>
    <link>/categories/shinipsum/</link>
      <atom:link href="/categories/shinipsum/index.xml" rel="self" type="application/rss+xml" />
    <description>shinipsum</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© ThinkR - 2023</copyright><lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/golemverse_banner.png</url>
      <title>shinipsum</title>
      <link>/categories/shinipsum/</link>
    </image>
    
    <item>
      <title>{shinipsum} is now on CRAN</title>
      <link>/post/2020-05-10_shinipsum-cran-realease/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-05-10_shinipsum-cran-realease/</guid>
      <description>&lt;p&gt;I&#39;m very happy to announce that &lt;code&gt;{shinipsum}&lt;/code&gt; is now on CRAN!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{shinipsum}&lt;/code&gt; is a package that can help you build &lt;code&gt;{shiny}&lt;/code&gt; prototypes faster by providing a series of functions that can generate random elements to populate your UI.
If you are familiar with &amp;ldquo;lorem ipsum&amp;rdquo;, the fake text generator that is used in software design as a placeholder for text, the idea is the same: generating placeholders for Shiny outputs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{shinipsum}&lt;/code&gt; can be installed from CRAN with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;shinipsum&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can install this package from GitHub with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&amp;quot;Thinkr-open/shinipsum&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this package, a series of functions that generates random placeholders.
For example, &lt;code&gt;random_ggplot()&lt;/code&gt; generates random &lt;code&gt;{ggplot2}&lt;/code&gt; elements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shinipsum)
library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;random_ggplot() +
  labs(title = &amp;quot;Random plot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-10_shinipsum-cran-realease/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;random_ggplot() +
  labs(title = &amp;quot;Random plot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 7 rows containing missing values (`geom_point()`).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-10_shinipsum-cran-realease/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, the idea is to combine this with a Shiny interface, for example &lt;code&gt;random_ggplot()&lt;/code&gt; will be used with a &lt;code&gt;renderPlot()&lt;/code&gt; and &lt;code&gt;plotOutput()&lt;/code&gt;.
And as we want to prototype but still be close to what your final application will look like, these functions take arguments that can shape the output: for example, &lt;code&gt;random_ggplot()&lt;/code&gt; has a &lt;code&gt;type&lt;/code&gt; parameter that can help you select a specific geom.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)
library(shinipsum)
library(DT)
ui &amp;lt;- fluidPage(
  h2(&amp;quot;A Random DT&amp;quot;),
  DTOutput(&amp;quot;data_table&amp;quot;),
  h2(&amp;quot;A Random Plot&amp;quot;),
  plotOutput(&amp;quot;plot&amp;quot;),
  h2(&amp;quot;A Random Text&amp;quot;),
  tableOutput(&amp;quot;text&amp;quot;)
)

server &amp;lt;- function(input, output, session) {
  output$data_table &amp;lt;- DT::renderDT({
    random_DT(5, 5)
  })
  output$plot &amp;lt;- renderPlot({
    random_ggplot(type = &amp;quot;point&amp;quot;)
  })
  output$text &amp;lt;- renderText({
    random_text(nwords = 50)
  })
}
shinyApp(ui, server)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other &lt;code&gt;{shinipsum}&lt;/code&gt; functions include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tables:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;random_table(nrow = 3, ncol = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   rating complaints privileges learning raises critical advance rating.1
## 1     43         51         30       39     61       92      45       43
## 2     63         64         51       54     63       73      47       63
## 3     71         70         68       69     76       86      48       71
##   complaints.1 privileges.1
## 1           51           30
## 2           64           51
## 3           70           68
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;print outputs:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;random_print(type = &amp;quot;model&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## 	Shapiro-Wilk normality test
## 
## data:  datasets::airquality$Ozone
## W = 0.87867, p-value = 2.79e-08
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip; and text, image, ggplotly, dygraph, and DT.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;code&gt;{shinipsum}&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thinkr-open.github.io/shinipsum/&#34;&gt;&lt;code&gt;{shinipsum}&lt;/code&gt; website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering-shiny.org/stepprotopype.html&#34;&gt;Chapter 10 Building an “ipsum-app” - Engineering Production-Grade Shiny Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
